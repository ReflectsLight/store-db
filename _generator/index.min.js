const fs=require("fs-extra"),yaml=require("js-yaml"),{join:join}=require("path"),isUrl=require("is-url-superb"),DEBUG="DEVELOPMENT"===process.env.ENV,isEmpty=string=>"string"!=typeof string||0==string.trim().length,APP_TYPES=["weblink","hosted","packaged","privileged","certified","root"];function validate_apps(appData,availibleCategories){const errors=[],error=error=>errors.push("- "+error);if(isEmpty(appData.name)&&error("Name is missing"),isEmpty(appData.description)&&error("Description is missing"),isEmpty(appData.icon)?error("Icon is missing"):isUrl(appData.icon)||error("Icon url invalid"),appData.download?(isEmpty(appData.download.url)?error("download.url missing"):isUrl(appData.download.url)||error("download.url invalid"),isEmpty(appData.download.version)&&error("download.version missing")):error("Download field missing"),isEmpty(appData.author)&&error("Author is missing"),isEmpty(appData.maintainer)&&error("Maintainer is missing"),appData.meta?(isEmpty(appData.meta.tags)&&error("meta.tags missing"),Array.isArray(appData.meta.categories)?appData.meta.categories.forEach(category=>{-1===availibleCategories.indexOf(category)&&error(`meta.categories: "${category}" was not found, did you forget define it in the 'categories' folder?`)}):error("meta.categories missing or not an array")):error("meta is missing"),isEmpty(appData.type)?error("type missing"):APP_TYPES.includes(appData.type)||error(appData.type+"is not a valid app type, this field can contain one of "+APP_TYPES.join(", ")),isEmpty(appData.license)&&error("License is missing"),isEmpty(appData.has_tracking)&&error("has Tracking is missing"),isEmpty(appData.has_ads)&&error("has ads is missing"),Array.isArray(appData.screenshots)&&appData.screenshots.forEach(screenshot_url=>{isUrl(screenshot_url)||error(`Screenshot url invalid: "${screenshot_url}"`)}),appData.website&&(isUrl(appData.website)||error(`Website url invalid: "${appData.website}"`)),appData.git_repo&&(isUrl(appData.git_repo)||error(`Git repo url invalid: "${appData.git_repo}"`)),appData.donation&&(isUrl(appData.donation)||error(`donation url invalid: "${appData.donation}"`)),errors.length>0)throw new Error(errors.join("\n "))}function validate_category(category){const errors=[],error=error=>errors.push("- "+error);if(isEmpty(category.name)&&error("Name is missing"),isEmpty(category.icon)&&error("Icon is missing"),errors.length>0)throw new Error(errors.join("\n "))}async function main(){let success=!0;const PUBLIC=join(__dirname,"../public");await fs.ensureDir(PUBLIC),await fs.emptyDir(PUBLIC),console.log("Processing categories:");const CATEGORIES=join(__dirname,"../categories"),cfiles=await fs.readdir(CATEGORIES);let categories={};for(let i=0;i<cfiles.length;i++){const file=cfiles[i];console.log("... Processing",file,"...");try{const yaml_content=await fs.readFile(join(CATEGORIES,file),"utf-8"),data=yaml.load(yaml_content);validate_category(data),categories[file.replace(/.ya?ml/,"")]=data}catch(error){console.error(`Error/s in ${file}:\n`,error.message),success=!1}}console.log("Found the following Categories:",Object.keys(categories),"\n"),console.log("Processing apps:");const APPS=join(__dirname,"../apps"),afiles=await fs.readdir(APPS);let apps=[];for(let i=0;i<afiles.length;i++){const file=afiles[i];console.log("... Processing",file,"...");try{const yaml_content=await fs.readFile(join(APPS,file),"utf-8"),appData=yaml.load(yaml_content);validate_apps(appData,Object.keys(categories)),appData.slug=file.replace(/.ya?ml/,""),apps.push(appData)}catch(error){console.error(`Error/s in ${file}:\n`,error.message),success=!1}}await fs.writeJSON(join(PUBLIC,"data.json"),{$schema:"./schema.json",version:1,generated_at:Date.now(),categories:categories,apps:apps},{spaces:DEBUG?1:0}),await fs.copyFile(join(__dirname,"schema.json"),join(PUBLIC,"schema.json")),success||process.exit(1)}main();